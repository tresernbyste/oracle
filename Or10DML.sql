/************************   study 계정으로 하기
파일명: Or10DML
Data Manipulation Language --  데이터 조작어
설명 : 레코드를 조작할 때 사용하는 query문 앞에서 학습했던 select문을 비롯하여  update,delete,insert가 있다.

************************/

--레코드 입력하기 : insert
--    레코드 입력을 위한 query로 문자형은 반드시 ' 로 감싸야한다.
--    숫자형은 ' 없이 그냥 쓰면된다. 만약 숫자형을 ' 로 감싸면 자동으로 
--    변환되어 입력된다.
    
-- 새로운 테이블 생성하기 

create table tb_sample(
    dept_no number(10),
    dept_name varchar2(20),
    dept_loc varchar2(15),
    dept_manager varchar2(30)
    );    
desc tb_sample;

-- data insert 데이터 입력
-- 1. 컬럼을 지정한 후 insert
insert into tb_sample ( dept_no,dept_name, dept_loc, dept_manager)
    values(10, '기획실', '서울', '나연');
select * from tb_sample;
insert into tb_sample ( dept_no,dept_name, dept_loc, dept_manager)
    values(20, '전산팀', '수원', '쯔위');
select * from tb_sample;

-- 2. 컬럼 지정없이 전체 컬럼을 대상으로 insert한다.
insert into tb_sample values(30, '영업팀', '대구', '모모');
insert into tb_sample values(40, '인사팀', '부산', '사나');
select * from tb_sample;

--@@@   컬럼을 지정해서 insert하는 경우 데이터를 삽입하지 않을 컬럼을 지정할 수 있다.
--      아래의 경우는 dept_name이 null이 된다.
insert into tb_sample ( dept_no, dept_loc, dept_manager)
    values(20, '수원', '쯔위');
select * from tb_sample;  -- 없으면 null이 들어간다.  컬럼과 값이 모두 없다면 null 이라는 말.

-- 지금까지의 작업(트랜잭션)을 그대로 유지하겠다는 명령으로 커밋을 수행하지 않는다면 
-- 외부에서는 변경된 레코드를 확인할 수 없다.    커밋이 없다면  내컴퓨터 안에만 레코드저장 
-- 여기에서 말하는 외부는 java/jsp 와 같은 orcle 이외의 프로그램을 말한다.
-- ## 트랜잭션이란 송금과 같은 하나의 단위작업을 말한다.   JUST TEST

commit;   -- 커밋 완료!  이제 외부에서 가져다 사용가능 

-- commit 이후 새로운 레코드를 삽입하면 임시테이블에 저장됩니다.

insert into tb_sample values(60, '금융팀', '광주', '사쿠라');
-- oracle에서 확인하면 실제 삽입된 것처럼 보이지만 실제로 반영되지 않은 상태이다.
-- 보이는 이유는 단순히 하드에 저장된 내 컴퓨터에 데이터 때문이지 외부에서는 확인할 수 없다.


-- 롤백 명령으로 마지막 커밋 상태로 되돌릴수 있다.
rollback;
select * from tb_sample;  -- 마지막 입력한 사쿠라 행이 보이지않음
-- 48번행 데이터는 없어지게 된다. 전 commit 바로 이후로 돌아간다.

-- rollback 명령ㅇ른 마지막 커밋 상태로 되돌려준다.
-- commit 한 이전의 상태로는 rollback 할 수 없다. 


-- data update : 레코드 수정하기
-- update tablename set colmn1=value1,colmnN=valueN  where 조건 
-- 테이블명 앞에 from 이 들어가지 않는다 @@@@@

-- 부서번호 40인 레코드의 지역을 미국으로 수정하시오.
update tb_sample set dept_loc ='미국' where dept_no = 40;
-- 지역이 서울인 레코드의 매니저명을 ' 박진영' 으로 수정하시오 
update tb_sample set dept_manager ='박진영' where dept_loc = '서울';
select * from tb_sample;



-- 모든 레코드를 대상으로 지역을 '부평'으로 변경하시오 
update tb_sample set dept_loc = '부평';
-- 전체 레코드가 대상이므로 where 조건절을 추가하지 않는다.
select * from tb_sample;


-- data delete : 레코드 삭제하기
-- 레코드를 삭제하므로 delete 뒤에 컬럼을 명시하지않는다.

--@ 부서번호가 10인 레코드를 삭제하시오
delete from tb_sample where dept_no = 20;
select *from tb_sample;

--@ 레코드 전체를 삭제하시오
-- where 절이 없으니 모든 레코드가 삭제된다. 
delete from tb_sample;


-- 마지막에 commit 했던 지점으로 되돌립니다. 
rollback;
select *from tb_sample; --



-- DML ( Data Manipulation Language)  데이터 조작어 : 레코드를 입력 및 조작하는 query문입니다.
-- 레코드 입력 수정 삭제  #INSERT #UPDATE #DELETE 
--INSERT 의 경우 컬럼을 생략할 수 있다.
--DELETE 의 경우 생략시 모든 레코드 삭제가능


--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@연습문제

/*
1. DDL문 연습문제 2번에서 만든 “pr_emp” 테이블에 다음과 같이 레코드를 
삽입하시오.
1, '엄태웅', '어른승민', to_date('1975-11-21') -- 방법1
2, '이제훈', '대학생승민', to_date('1978-07-23') 
3, '한가인', '어른서연', to_date('1982-10-24')  -- 방법2
4, '배수지', '대학생서연', to_date('1988-05-21')
*/


/*
2. pr_emp 테이블의 eno가 짝수인 레코드를 찾아서 job 컬럼의 
내용을 다음과 같이 변경하시오.
job=job||'(짝수)'
job=concat(job,'(홀수)')
*/

/*
3. pr_emp 테이블에서 job 이 대학생인 레코드를 찾아 이름만 삭제하시오. 
레코드는 삭제되면 안됩니다.
*/



/*
4.  pr_emp 테이블에서 등록일이 10월인 모든 레코드를 삭제하시오.
*/


/*
5. pr_emp 테이블을 복사해서 pr_emp_clone 테이블을 생성하되 다음 조건에 따르시오. 
조건1 : 기존의 컬럼명을 idx, name, nickname, regidate 와같이 변경해서 복사한다. 
조건2 : 레코드까지 모두 복사한다. 
*/



/*
6. 5번에서 복사한 pr_emp_clone 테이블명을 pr_emp_rename 으로 변경하시오.
*/


/*
7. pr_emp_rename 테이블을 삭제하시오
*/

    
    
    



































